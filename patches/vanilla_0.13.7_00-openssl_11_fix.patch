--- configure.ac	2016-12-12 08:49:18.000000000 +0000
+++ configure.ac	2017-07-15 21:59:08.972258054 +0100
@@ -65,37 +65,8 @@ CFLAGS="$PTHREAD_CFLAGS $CPPUNIT_CFLAGS
 CXXFLAGS="$PTHREAD_CFLAGS $CPPUNIT_CFLAGS $CXXFLAGS"
 LIBS="$PTHREAD_LIBS $CPPUNIT_LIBS $LIBS"
 
-AC_ARG_ENABLE(openssl,
-  [  --disable-openssl       Don't use OpenSSL's SHA1 implementation.],
-  [
-    if test "$enableval" = "yes"; then
-      PKG_CHECK_MODULES(OPENSSL, libcrypto,
-        CXXFLAGS="$CXXFLAGS $OPENSSL_CFLAGS";
-        LIBS="$LIBS $OPENSSL_LIBS")
-
-      AC_DEFINE(USE_OPENSSL, 1, Using OpenSSL.)
-      AC_DEFINE(USE_OPENSSL_SHA, 1, Using OpenSSL's SHA1 implementation.)
-    else
-      AC_DEFINE(USE_NSS_SHA, 1, Using Mozilla's SHA1 implementation.)
-    fi
-  ],[
-    PKG_CHECK_MODULES(OPENSSL, libcrypto,
-      CXXFLAGS="$CXXFLAGS $OPENSSL_CFLAGS";
-      LIBS="$LIBS $OPENSSL_LIBS")
-
-    AC_DEFINE(USE_OPENSSL, 1, Using OpenSSL.)
-    AC_DEFINE(USE_OPENSSL_SHA, 1, Using OpenSSL's SHA1 implementation.)
-  ]
-)
-
-AC_ARG_ENABLE(cyrus-rc4,
-  [  --enable-cyrus-rc4=PFX  Use Cyrus RC4 implementation.],
-  [
-    CXXFLAGS="$CXXFLAGS -I${enableval}/include";
-    LIBS="$LIBS -lrc4 -L${enableval}/lib"
-    AC_DEFINE(USE_CYRUS_RC4, 1, Using Cyrus RC4 implementation.)
-  ]
-)
+TORRENT_ARG_OPENSSL
+TORRENT_ARG_CYRUS_RC4
 
 AC_CHECK_FUNCS(posix_memalign)
 
--- Makefile.am	2016-12-12 08:49:18.000000000 +0000
+++ Makefile.am	2017-07-15 22:02:49.907727811 +0100
@@ -8,6 +8,7 @@ EXTRA_DIST= \
 	scripts/checks.m4 \
 	scripts/common.m4 \
 	scripts/attributes.m4 \
+	scripts/ssl.m4 \
 	doc/main.xml \
 	doc/http.xml \
 	doc/torrent.xml \
--- scripts/ssl.m4	1970-01-01 01:00:00.000000000 +0100
+++ scripts/ssl.m4	2017-07-15 22:05:35.982955500 +0100
@@ -0,0 +1,39 @@
+AC_DEFUN([TORRENT_CHECK_OPENSSL],
+  [
+    PKG_CHECK_MODULES(OPENSSL, libcrypto,
+      CXXFLAGS="$CXXFLAGS $OPENSSL_CFLAGS";
+      LIBS="$LIBS $OPENSSL_LIBS")
+
+    AC_DEFINE(USE_OPENSSL, 1, Using OpenSSL.)
+    AC_DEFINE(USE_OPENSSL_SHA, 1, Using OpenSSL's SHA1 implementation.)
+    AC_CHECK_LIB([crypto], [DH_set0_pqg], [AC_DEFINE(USE_OPENSSL_1_1, 1, Using OpenSSL 1.1.)])
+  ]
+)
+
+AC_DEFUN([TORRENT_ARG_OPENSSL],
+  [
+    AC_ARG_ENABLE(openssl,
+      [  --disable-openssl       Don't use OpenSSL's SHA1 implementation.],
+      [
+        if test "$enableval" = "yes"; then
+          TORRENT_CHECK_OPENSSL
+        else
+          AC_DEFINE(USE_NSS_SHA, 1, Using Mozilla's SHA1 implementation.)
+        fi
+      ],[
+        TORRENT_CHECK_OPENSSL
+      ])
+  ]
+)
+
+AC_DEFUN([TORRENT_ARG_CYRUS_RC4],
+  [
+    AC_ARG_ENABLE(cyrus-rc4,
+      [  --enable-cyrus-rc4=PFX  Use Cyrus RC4 implementation.],
+      [
+        CXXFLAGS="$CXXFLAGS -I${enableval}/include";
+        LIBS="$LIBS -lrc4 -L${enableval}/lib"
+        AC_DEFINE(USE_CYRUS_RC4, 1, Using Cyrus RC4 implementation.)
+      ])
+  ]
+)
--- src/utils/diffie_hellman.cc
+++ src/utils/diffie_hellman.cc
@@ -54,11 +54,23 @@ DiffieHellman::DiffieHellman(const unsigned char *prime, int primeLength,
   m_secret(NULL), m_size(0) {
 
 #ifdef USE_OPENSSL
+
   m_dh = DH_new();
+
+#ifdef USE_OPENSSL_1_1
+  BIGNUM * const dh_p = BN_bin2bn(prime, primeLength, NULL);
+  BIGNUM * const dh_g = BN_bin2bn(generator, generatorLength, NULL);
+
+  if (dh_p == NULL || dh_g == NULL ||
+      !DH_set0_pqg(m_dh, dh_p, NULL, dh_g))
+	  throw internal_error("Could not generate Diffie-Hellman parameters");
+#else
   m_dh->p = BN_bin2bn(prime, primeLength, NULL);
   m_dh->g = BN_bin2bn(generator, generatorLength, NULL);
+#endif
 
   DH_generate_key(m_dh);
+
 #else
   throw internal_error("Compiled without encryption support.");
 #endif
@@ -74,7 +86,19 @@ DiffieHellman::~DiffieHellman() {
 bool
 DiffieHellman::is_valid() const {
 #ifdef USE_OPENSSL
+  if (m_dh == NULL)
+    return false;
+
+#ifdef USE_OPENSSL_1_1
+  const BIGNUM *pub_key;
+
+  DH_get0_key(m_dh, &pub_key, NULL);
+
+  return pub_key != NULL;
+#else
   return m_dh != NULL && m_dh->pub_key != NULL;
+#endif
+
 #else
   return false;
 #endif
@@ -103,8 +127,16 @@ DiffieHellman::store_pub_key(unsigned char* dest, unsigned int length) {
 #ifdef USE_OPENSSL
   std::memset(dest, 0, length);
 
-  if ((int)length >= BN_num_bytes(m_dh->pub_key))
-    BN_bn2bin(m_dh->pub_key, dest + length - BN_num_bytes(m_dh->pub_key));
+  const BIGNUM *pub_key;
+
+#ifdef USE_OPENSSL_1_1
+  DH_get0_key(m_dh, &pub_key, NULL);
+#else
+  pub_key = m_dh->pub_key;
+#endif
+
+  if ((int)length >= BN_num_bytes(pub_key))
+    BN_bn2bin(pub_key, dest + length - BN_num_bytes(pub_key));
 #endif
 }
 
